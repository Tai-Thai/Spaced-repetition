{"version":3,"file":"background.js","mappings":"yBAAO,IAAMA,EACK,2BADLA,EAEQ,8BAFRA,EAGU,wBC+FnBC,EAAO,GAEXC,OAAOC,QAAQC,UAAUC,aAAY,SAAUC,EAASC,EAAQC,GAC5D,OAAQF,EAAQG,QACZ,KAAKT,EACDU,QAAQC,IAAI,yCAEZH,EAAa,CAAEP,KAAMA,IACrB,MACJ,KAAKD,EACDU,QAAQC,IAAI,wBACZ,IAAMC,EAAUN,EAAQO,QAClBC,EACFR,EAAQS,aACRd,EAAKe,WAAU,SAACC,GAAI,OAAKA,EAAKC,KAAON,EAAQM,EAAE,IAG/CJ,GAAS,IACTb,EAAKa,GAASF,GAKlB,MACJ,KAAKZ,EACDU,QAAQC,IAAI,8CAGZV,EAAKkB,QAAQb,EAAQO,SAWjC,IAIAX,OAAOkB,KAAKC,YAAYhB,aAAY,SAAUiB,GAE1C,IAAMC,EAAQD,EAAWC,MAEzBb,QAAQC,IAAI,kBAEZT,OAAOkB,KAAKI,YAAYD,EAAO,CAAEd,OAAQ,gBAAiBR,KAAAA,GAC9D,G","sources":["extension/constances.js","background.js"],"sourcesContent":["export const extensionActions = {\r\n    getVocabData: \"GET_VOCAB_DATA_EXTENSION\",\r\n    updateVocabData: \"UPDATE_VOCAB_DATA_EXTENSION\",\r\n    addNewVocabInData: \"ADD_NEW_VOCAB_IN_DATA\",\r\n};\r\n","/* eslint-disable no-undef */\r\n// // import API_VOCA from \"./mylibrary/js/api\";\r\n// // import API_VOCA from \"./firebase/API_VOCA\";\r\n// import chromeExtension from \"./chromeExtension/chromeExtension\";\r\n// import API_VOCA from \"./firebase/API_VOCA\";\r\n// // import chromeExtension from \"./mylibrary/js/chromeExtension/chromeExtension\";\r\n\r\nimport { extensionActions } from \"./extension/constances\";\r\n// import { DATA } from \"./firebase/mockData\";\r\n// import { DATA } from \"./firebase/mockData\";\r\n\r\n// import { WORD_LIST_TEST_MODE } from \"./App\";\r\n\r\n// let firstAlarm = 1;\r\n// let repetitiveDataNewest;\r\n// /* eslint-disable no-undef */\r\n// chrome.alarms.onAlarm.addListener(function (alarm) {\r\n//     if (alarm.name === chromeExtension.reminder) {\r\n//         console.log(\"ALARM RUNNING...\");\r\n//         // const currentTime = new Date().getTime();\r\n\r\n//         var options = {\r\n//             type: \"basic\",\r\n//             title: \"Time to learn English vocabulary with spaced repetition!\",\r\n//             message: `Hey there! Have you forgotten any English vocabulary today? Do you remember What ${repetitiveDataNewest.voca} is? Don't miss the opportunity to improve your English skills! Start learning now!`,\r\n//             iconUrl:\r\n//                 \"https://e7.pngegg.com/pngimages/370/437/png-clipart-duolingo-flashcard-learning-spaced-repetition-language-tiny-smiley-emoticon.png\",\r\n//             silent: true,\r\n//         };\r\n//         chrome.notifications.create(options);\r\n//         // createVocaAlarm();\r\n//     }\r\n// });\r\n\r\n// async function createVocaAlarm(_repetitiveDataNewest) {\r\n//     repetitiveDataNewest = _repetitiveDataNewest;\r\n//     console.log({ repetitiveDataNewest });\r\n//     if (!repetitiveDataNewest) {\r\n//         console.log(\"HAS not REPETITIVE DATA NEWEST\");\r\n//         const dataVoca = await API_VOCA.get();\r\n//         if (dataVoca.length > 0) {\r\n//             repetitiveDataNewest = dataVoca[0];\r\n//         } else {\r\n//             return;\r\n//         }\r\n//     }\r\n//     console.log({ repetitiveDataNewest2: repetitiveDataNewest });\r\n//     // const milliseconds = getMinTimeReminder(dataVoca);\r\n//     const currentTime = new Date().getTime();\r\n//     const reminderTimeMilliseconds =\r\n//         repetitiveDataNewest.repetitiveTime - currentTime;\r\n//     const reminderTime = reminderTimeMilliseconds / 60000; // milliseconds to minutes\r\n//     if (firstAlarm > 1 && reminderTime < 0) return;\r\n//     console.log(\"CREATE ALARM: \" + reminderTime + \" minutes\");\r\n//     console.log(\"++++++ CREATED ALARM ++++++\");\r\n//     firstAlarm++;\r\n//     // console.log({ dataVoca });\r\n//     chrome.alarms.create(chromeExtension.reminder, {\r\n//         delayInMinutes: reminderTime,\r\n//         // periodInMinutes: 0.5,\r\n//     });\r\n// }\r\n\r\n// function cancelAlarm(alarmName = chromeExtension.reminder) {\r\n//     chrome.alarms.clear(alarmName);\r\n//     console.log(\"Alarm canceled.\");\r\n// }\r\n\r\n// createVocaAlarm();\r\n\r\n// chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {\r\n//     // alert(\"message received\");\r\n//     console.log(\"Listen Message External\", { message });\r\n//     if (message.vocaAlarm) {\r\n//         chrome.alarms.get(message.alarmName, (alarm) => {\r\n//             console.log({ alarm });\r\n//             if (alarm) {\r\n//                 // An alarm with the same name already exists, cancel it\r\n//                 chrome.alarms.clear(message.alarmName, function () {\r\n//                     console.log(\"Clear Alarm\");\r\n//                     // clearTimeout(timeId);\r\n\r\n//                     // Create a new alarm\r\n//                     createVocaAlarm(message.data);\r\n//                 });\r\n//             } else {\r\n//                 // No alarm exists, create a new one\r\n//                 createVocaAlarm(message.data);\r\n//             }\r\n//         });\r\n//     }\r\n// });\r\n\r\n// // ,\r\n// //     \"content_security_policy\": {\r\n// //         \"extension_pages\": \"script-src 'self' https://www.gstatic.com/ https://*.firebaseio.com https://www.googleapis.com; object-src 'self'; connect-src 'self' wss://*.firebaseio.com;\"\r\n// //     }\r\n\r\nlet data = [];\r\n\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n    switch (request.action) {\r\n        case extensionActions.getVocabData:\r\n            console.log(\"sr-app: get vocab data from extension\");\r\n            // console.log(request);\r\n            sendResponse({ data: data });\r\n            break;\r\n        case extensionActions.updateVocabData:\r\n            console.log(\"sr-app: update vocab\");\r\n            const _update = request.payload;\r\n            const index =\r\n                request.indexInData ||\r\n                data.findIndex((item) => item.id === _update.id);\r\n\r\n            // console.log({ index: index, _update, indexSended: request.index });\r\n            if (index > -1) {\r\n                data[index] = _update;\r\n            }\r\n            // console.log(request);\r\n            // data = request.payload;\r\n            // sendResponse({ data: data });\r\n            break;\r\n        case extensionActions.addNewVocabInData:\r\n            console.log(\"sr-app: add new vocab in data of extension\");\r\n            // console.log(request);\r\n            // data = request.payload;\r\n            data.unshift(request.payload);\r\n            // sendResponse({ data: data });\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    // Xử lý thông điệp từ trang web ở đây\r\n    // if (request.action === ) {\r\n    //   // Xử lý và trả lời thông điệp\r\n    //   sendResponse({ data: \"Dữ liệu từ tiện ích mở rộng\" });\r\n    // }\r\n});\r\n\r\n// on active tab\r\n\r\nchrome.tabs.onActivated.addListener(function (activeInfo) {\r\n    // activeInfo chứa thông tin về tab web đang được kích hoạt\r\n    const tabId = activeInfo.tabId;\r\n    // console.log({ activeInfo });\r\n    console.log(\"active new tab\");\r\n    // Gửi tin nhắn đến tab web được kích hoạt\r\n    chrome.tabs.sendMessage(tabId, { action: \"tab_activated\", data });\r\n});\r\n\r\n//   const handleGetVocabData = () => {\r\n\r\n//   }\r\n"],"names":["extensionActions","data","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","console","log","_update","payload","index","indexInData","findIndex","item","id","unshift","tabs","onActivated","activeInfo","tabId","sendMessage"],"sourceRoot":""}